@model ScoringSubmission
@{
    Layout = "_AdminLayout";
    ViewBag.Title = "Scoring Dashboard";
    Dictionary<string, Team> allTeams = ViewBag.AllTeams;
    Dictionary<string, Team> orderedTeams = allTeams.OrderByDescending(t=> t.Value.CombinedScore).ToDictionary(kvp=> kvp.Key, kvp=> kvp.Value);
    Team activeTeam = ViewBag.ActiveTeam;
    Dictionary<string, ScoreQuestion> scoringQuestions = ViewBag.ScoringQuestions;
}
@functions {

    string ToChartTeamsLabelArray(Dictionary<string, Team> teams) {
        var teamNames = teams.Values.Select(t=> "'"+t.Name+"'");
		string delimetedString = "["+String.Join(",", teamNames)+"]";
		return delimetedString;
	}
    string ToChartTeamsScoresArray(Dictionary<string, Team> teams) {
        var combinedScores = teams.Values.Select(t=> t.CombinedScore);
		string delimetedString = "["+String.Join(",", combinedScores)+"]";
		return delimetedString;
	}
    string ToChartTeamsScoresCountArray(Dictionary<string, Team> teams) {
        var combinedScores = teams.Values.Select(t=> t.CountScoresByQuestionId.Values.Sum());
		string delimetedString = "["+String.Join(",", combinedScores)+"]";
		return delimetedString;
	}

}
@functions {
    string ToChartQuestionLabelArray(Team team, Dictionary<string, ScoreQuestion> scoringQuestions) {
        var dataLabelKeys = team.AvgWeightedScoresByQuestionId.Keys;
        var dataLabelQuestionTitles = dataLabelKeys.Select(k=> "'"+scoringQuestions[k].Title+"'");
		string delimetedString = "["+String.Join(",", dataLabelQuestionTitles)+"]";
		return delimetedString;
	}
    string ToChartAvgsDataArray(Team team) {
        var dataPoints = team.AvgWeightedScoresByQuestionId.Values;
		string delimetedString = "["+String.Join(",", dataPoints)+"]";
		return delimetedString;
	}
    string ToChartCountsDataArray(Team team) {
        var dataPoints = team.CountScoresByQuestionId.Values;
		string delimetedString = "["+String.Join(",", dataPoints)+"]";
		return delimetedString;
	}
}

<style>
    .team-card {
        display: inline-block;
        background-color: var(--bh-dark-green);
        border: 1px solid var(--bh-green);
        border-radius: 10px;
        padding: 3px 10px 3px 10px;
        margin: 3px;
    }

    
</style>

<span class="text-white">
<h1>Scoring Dashboard</h1>


@* Show Active Team *@
<h3>Active Team</h3>
@if (activeTeam != null)
{
    <div>This is the team that score submissions will be contributed to.</div>
    <div class="team-card">
        <div>@activeTeam.Name</div>
        <ul>
            @foreach (ApplicationUser appUser in activeTeam.TeamMembers.Values)
            {
                <li>@appUser.FirstName @appUser.LastName</li>
            }
        </ul>
    </div>
}
else {
    <div>No team is active. Please set an active team below.</div>
}


@* Change Active Team *@
<h3 style="margin-top:15px;">Change Active Team</h3>
<form method="post" asp-action="SetActiveTeam" enctype="multipart/form-data">
    @* Show option for each team *@
    @foreach (Team team in allTeams.Values)
    {
        string isCheckedTag = "";
        if (team == activeTeam) {isCheckedTag = "checked";}
        <div class="team-card">
            <input type="radio" name="activeTeamId" value="@team.Id" @isCheckedTag>
            @team.Name
            <ul class="active-team-members">
                @foreach (ApplicationUser appUser in team.TeamMembers.Values)
                {
                    <li>@appUser.FirstName @appUser.LastName</li>
                }
            </ul>
        </div>
    }

    @* Option to disable scoring *@
    <br/>
    <div class="team-card">
        @{
            var isCheckedTagNull = "";
            if (activeTeam == null) {isCheckedTagNull = "checked";}
        }
        <input type="radio" name="activeTeamId" value="null" @isCheckedTagNull>
        Disable Scoring<br/>
        <div>No active team.</div>
    </div>
    <br/>
    <input type="submit" value="Save" class="btn btn-primary" style="margin-top:15px;"/>
</form>

@* Combined Score *@
<h3 style="margin-top:15px;">Combined Score</h3>
<div style="margin-bottom:100px;" class="row">
    <div class="col-12" style="text-align:center;">
        <canvas id="bar-chart-teams-combined" class="bar-chart-teams-combined" height="150" ></canvas>
    </div>
</div>

@* Team Score Summaries *@
<h3 style="margin-top:15px;">Team Summaries</h3>
<div style="margin-bottom:100px;" class="row">
    @foreach (Team team in allTeams.Values)
    {
        <div class="col-xs-12, col-sm-6" style="text-align:center;">
            <h5>@team.Name</h5>
            <canvas id="bar-chart-team-@team.Id" class="team-scores-bar-chart" height="150" ></canvas>
        </div>
    }
</div>

</span>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0" asp-append-version="true"></script>
	@* Reference: https://www.chartjs.org/docs/latest/samples/information.html *@
	@* Reference: https://chartjs-plugin-datalabels.netlify.app/guide/#table-of-contents *@

    @* Score Charts *@
	<script>
		$(document).ready(function(){
			Chart.register(ChartDataLabels);
			
			// Colors
			const bh_dark_green = '#05322B';
			const bh_green =  '#018374';
			const osu_orange = '#FE5C00';
			charts = {};

            // Formatting, combined teams
            $(".bar-chart-teams-combined").each(function() {
				let chartId = $(this).attr('id');
				const ctx = document.getElementById(chartId).getContext('2d');
				const myChart = new Chart(ctx, {
					type: 'bar',
					data: {
						datasets: [{
							backgroundColor: osu_orange,
							borderColor: bh_green,
							borderWidth: 1,
                            datalabels: {
								color: bh_green,
								anchor: 'end',
								align: 'end',
							},
                            yAxisID: 'y',
                            order: 1,
						},
                        {
                            borderColor: "#AAA",
                            backgroundColor: "#AAA",
                            type: 'line',
                            datalabels: {
								color: "#AAA",
								anchor: 'end',
								align: 'end',
							},
                            yAxisID: 'y2',
                            order: 0
                        }
                        ]
					},
					options: {
                        animation: false,
						scales: {
							y: {
								min: 0,
                                title: {
									display: true,
                                    color: bh_green,
									text: 'Combined Score'
								},
								ticks: {
                                    color: bh_green,
                                    autoSkip: false,
								},
                                grid: {
                                    display: false,
                                    color: '#666',
                                    borderColor: bh_green
                                }
							},
                            y2: {
                                min: 0,
                                max: 50,
                                title: {
									display: true,
                                    color: "#AAA",
									text: 'Count Scores'
								},
                                ticks: {
                                    color: "#AAA",
                                },
                                grid: {
                                    display: false
                                }
                            },
							x: {
								title: {
									display: true,
                                    color: osu_orange,
									text: 'Team'
								},
                                ticks: {
                                    color: osu_orange,
                                    autoSkip: false,
                                    maxRotation: 90
                                    @* minRotation: 45 *@
                                },
                                grid: {
                                    display: false,
                                    color: bh_green,
                                    borderColor: bh_green
                                }
							}
						},
						layout: {
							padding: {
								top: 25
							}
						},
						plugins: {
							legend: {
								display: false
							}
						}
					}
				});
				charts[chartId] = myChart;
			});

            // Add data to combined chart
            @{
                var combinedLabels = ToChartTeamsLabelArray(orderedTeams);
                var combinedScores = ToChartTeamsScoresArray(orderedTeams);
                var combinedScoresCounts = ToChartTeamsScoresCountArray(orderedTeams);
            }
            @* var scoresCountsdataCounts = ToChartCountsDataArray(team); *@
            @Html.Raw($"charts['bar-chart-teams-combined'].data.labels = {combinedLabels};\n")
            @Html.Raw($"charts['bar-chart-teams-combined'].data.datasets[0].data = {combinedScores};\n")
            @Html.Raw($"charts['bar-chart-teams-combined'].data.datasets[1].data = {combinedScoresCounts};\n")
            @Html.Raw($"charts['bar-chart-teams-combined'].update();\n")


            // Formatting, individual teams
			$(".team-scores-bar-chart").each(function() {
				let chartId = $(this).attr('id');
				const ctx = document.getElementById(chartId).getContext('2d');
				const myChart = new Chart(ctx, {
					type: 'bar',
					data: {
						datasets: [{
							backgroundColor: osu_orange,
							borderColor: bh_green,
							borderWidth: 1,
                            datalabels: {
								color: bh_green,
								anchor: 'end',
								align: 'end',
							},
                            yAxisID: 'y',
                            order: 1,
						},
                        {
                            borderColor: "#AAA",
                            backgroundColor: "#AAA",
                            type: 'line',
                            datalabels: {
								color: "#AAA",
								anchor: 'end',
								align: 'end',
							},
                            yAxisID: 'y2',
                            order: 0
                        }
                        ]
					},
					options: {
                        animation: false,
						scales: {
							y: {
								min: 0,
                                @* max: 5, *@
                                title: {
									display: true,
                                    color: bh_green,
									text: 'Avg. Score'
								},
								ticks: {
                                    color: bh_green,
                                    autoSkip: false,
									@* stepSize: 1 *@
								},
                                grid: {
                                    display: false,
                                    color: '#666',
                                    borderColor: bh_green
                                }
							},
                            y2: {
                                min: 0,
                                max: 50,
                                title: {
									display: true,
                                    color: "#AAA",
									text: 'Count Scores'
								},
                                ticks: {
                                    color: "#AAA",
                                },
                                grid: {
                                    display: false
                                }
                            },
							x: {
								title: {
									display: true,
                                    color: osu_orange,
									text: 'Question'
								},
                                ticks: {
                                    color: osu_orange,
                                    autoSkip: false,
                                    maxRotation: 90
                                    @* minRotation: 45 *@
                                },
                                grid: {
                                    display: false,
                                    color: bh_green,
                                    borderColor: bh_green
                                }
							}
						},
						layout: {
							padding: {
								top: 25
							}
						},
						plugins: {
							legend: {
								display: false
							}
						}
					}
				});
				charts[chartId] = myChart;
			});

			// Add  data to charts
            @foreach (Team team in allTeams.Values)
            {
                var labels = ToChartQuestionLabelArray(team, scoringQuestions);
                var dataAvgs = ToChartAvgsDataArray(team);
                var dataCounts = ToChartCountsDataArray(team);
                @Html.Raw($"charts['bar-chart-team-{team.Id}'].data.labels = {labels};\n")
                @Html.Raw($"charts['bar-chart-team-{team.Id}'].data.datasets[0].data = {dataAvgs};\n")
                @Html.Raw($"charts['bar-chart-team-{team.Id}'].data.datasets[1].data = {dataCounts};\n")
            }

			// Update display for charts
            @foreach (Team team in allTeams.Values)
            {
                @Html.Raw($"charts['bar-chart-team-{team.Id}'].update();\n")
            }
		});
	</script>
}