@model HackathonWebApp.Models.HackathonEvent

@{
    ViewData["Title"] = "Edit Event";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    HackathonEvent hackathonEvent = Model;
}

<div class="container text-white">
    <h1 class="text-white">Update Hackathon Event</h1>
    <div class="row">
        <div class="col-md-4">
            <form asp-action="UpdateHackathonEvent">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" class="form-control" />

                <h2>Basics</h2>
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="StartTime" class="control-label"></label>
                    <input asp-for="StartTime" class="form-control" type="date" />
                    <span asp-validation-for="StartTime" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="EndTime" class="control-label"></label>
                    <input asp-for="EndTime" class="form-control" type="date"/>
                    <span asp-validation-for="EndTime" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="IsActive" class="control-label"></label><br/>
                    @Html.DropDownListFor(m => m.IsActive, new SelectList( new Dictionary<bool, string>() {
                            { false, "Inactive"},
                            { true, "Active"}
                        }, "Key", "Value"), "Select Active", new { @class="basic-info-selector" })
                    <span asp-validation-for="IsActive" class="text-danger"></span>
                </div>

                <h2>Registration Settings</h2>
                <div class="form-group">
                    @{ var majorOptions = String.Join("\n", hackathonEvent.RegistrationSettings.MajorOptions.Values).Trim(); }
                    <label class="control-label" for="MajorOptions">Major Options</label>
                    <textarea style="width:100%;" id="majorOptionsTextArea" rows="@(hackathonEvent.RegistrationSettings.MajorOptions.Count()+1)">@majorOptions</textarea>
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>

<div class="container text-white">
    <h2 class="text-white">Danger Zone</h1>
    <div class="row">
        <div class="col-md-4">
            <form asp-action="DeleteHackathonEvent">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" class="form-control" />

                <div class="form-group">
                    This will permantently delete the event and all associated settings/information.
                    @if(!hackathonEvent.IsActive)
                    {
                        <input type="submit" value="Delete" class="btn btn-danger" /> 
                    }else {
                        <input type="submit" value="Delete" class="btn btn-danger" disabled/> 
                        <div style="margin-top:5px;">*The active event may not be deleted.</div>
                    }
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
    $( document ).ready(function() {

        // Pre-generate hidden inputs for MajorOptions
        regenerateHiddenInputsMajorOptions()
        // Regenerate hidden inputs for Majore Options, if changed.
        $("#majorOptionsTextArea").change(regenerateHiddenInputsMajorOptions)
        
    });

    function regenerateHiddenInputsMajorOptions() {
        // Retrieve element with textual list of major options
        var majorOptionsTextArea =  $("#majorOptionsTextArea");
        
        // Delete existing major options (stored as hidden inputs)
        $(".major-option-input").remove();

        // Regenerate them as hidden inputs
        var majorOptionsText = majorOptionsTextArea.val();
        var majorOptionsList = majorOptionsText.split("\n")
            .filter(a=>a)
            .sort(function (a, b) {
                return a.toLowerCase().localeCompare(b.toLowerCase());
            });
        $.each(majorOptionsList.reverse(), function(index, majorOption) {
            var key = majorOption.toLowerCase().replace(' ', '_');
            var htmlInput = `<input type="hidden" class="major-option-input" name="RegistrationSettings.MajorOptions['${key}']" value="${majorOption}"/>`;
            majorOptionsTextArea.after(htmlInput);
        });
    }
</script>
}
